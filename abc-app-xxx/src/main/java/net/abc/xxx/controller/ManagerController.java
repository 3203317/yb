package net.abc.xxx.controller;import java.util.Date;import java.util.HashMap;import java.util.Map;import javax.servlet.http.HttpSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import net.abc.controller.BaseController;import net.abc.model.ResultMap;import net.abc.xxx.model.Manager;import net.abc.xxx.service.ManagerService;/** * * @author Administrator * */@Controllerpublic class ManagerController extends BaseController {	@Autowired	private ManagerService managerService;	/**	 * 	 * @param session	 * @param map	 * @return	 */	@RequestMapping(value = { "/user/login" }, method = RequestMethod.GET)	public String loginUI(HttpSession session, Map<String, Object> map) {//		map.put("verify_token", genVerifyToken(session));		return "manager/login";	}	/**	 * 	 * @param session	 * @param verify_token	 * @param user_name	 * @param user_pass	 * @return	 */	@ResponseBody	@RequestMapping(value = { "/user/login" }, method = RequestMethod.POST, produces = "application/json")	public Map<String, Object> login(HttpSession session, @RequestParam(required = true) String verify_token,			@RequestParam(required = true) String user_name, @RequestParam(required = true) String user_pass) {		Map<String, Object> result = new HashMap<String, Object>();		result.put("success", false);		ResultMap<Void> verifyToken = verifyToken(session, verify_token);		if (!verifyToken.getSuccess()) {			result.put("msg", verifyToken.getMsg());			return result;		}		ResultMap<Manager> map = managerService.login(user_name, user_pass);		if (!map.getSuccess()) {			result.put("msg", map.getMsg());			return result;		}		// 获取用户对象		Manager manager = map.getData();		session.setAttribute("session.user", manager);		session.setAttribute("session.user.id", manager.getId());		session.setAttribute("session.user.lv", 1);		session.setAttribute("session.time", (new Date()).toString());		result.put("success", true);		return result;	}	/**	 * 	 * @param session	 * @return	 */	@RequestMapping(value = { "/user/logout" }, method = RequestMethod.GET)	public String logoutUI(HttpSession session) {		session.invalidate();		return "redirect:/manager/login";	}	/**	 * 修改密码	 *	 * @param session	 * @param map	 * @return	 */	@RequestMapping(value = { "/manager/changePwd" }, method = RequestMethod.GET)	public String changePwdUI(HttpSession session, Map<String, Object> map) {		map.put("verify_token", genVerifyToken(session));		map.put("session_user", session.getAttribute("session.user"));		map.put("nav_choose", ",03,0302,");		return "manager/changePwd";	}	@ResponseBody	@RequestMapping(value = { "/manager/changePwd" }, method = RequestMethod.POST, produces = "application/json")	public Map<String, Object> changePwd(HttpSession session, @RequestParam(required = true) String verify_token,			@RequestParam(required = true) String old_pass, @RequestParam(required = true) String new_pass) {		Map<String, Object> result = new HashMap<String, Object>();		result.put("success", false);		ResultMap<Void> verifyToken = verifyToken(session, verify_token);		if (!verifyToken.getSuccess()) {			result.put("msg", verifyToken.getMsg());			return result;		}		ResultMap<Void> changePwd = managerService.changePwd(session.getAttribute("session.user.id").toString(),				old_pass, new_pass);		if (!changePwd.getSuccess()) {			result.put("msg", changePwd.getMsg());			return result;		}		result.put("success", true);		return result;	}}